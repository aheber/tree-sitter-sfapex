{
  "name": "tree-sitter-sfapex",
  "version": "1.0.7",
  "description": "A tree-sitter grammer for Salesforce's Apex, SOQL, and SOSL",
  "homepage": "https://github.com/aheber/tree-sitter-sfapex",
  "bugs": {
    "url": "https://github.com/aheber/tree-sitter-sfapex/issues"
  },
  "license": "MIT",
  "author": {
    "name": "Anthony Heber"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/aheber/tree-sitter-sfapex.git"
  },
  "dependencies": {
    "node-addon-api": "^7.1.0",
    "node-gyp-build": "^4.8.0"
  },
  "peerDependencies": {
    "tree-sitter": "^0.21.0"
  },
  "peerDependenciesMeta": {
    "tree_sitter": {
      "optional": true
    }
  },
  "devDependencies": {
    "prebuildify": "^6.0.1",
    "tree-sitter-cli": "^0.23.2",
    "web-tree-sitter": "^0.22.5"
  },
  "main": "bindings/node",
  "scripts": {
    "build": "npm run build-generate && npm run build-wasm",
    "build-generate": "npm run build-apex && npm run build-soql && npm run build-sosl && npm run build-sflog",
    "build-apex": "cd apex && npx tree-sitter generate --no-bindings",
    "build-soql": "cd soql && npx tree-sitter generate --no-bindings",
    "build-sosl": "cd sosl && npx tree-sitter generate --no-bindings",
    "build-sflog": "cd sflog && npx tree-sitter generate --no-bindings",
    "build-wasm": "npm run build-apex-wasm && npm run build-soql-wasm && npm run build-sosl-wasm && npm run build-sflog-wasm",
    "build-apex-wasm": "cd apex && npx tree-sitter build --wasm && cp tree-sitter-apex.wasm ../docs/playground/js/ && cp tree-sitter-apex.wasm ../bindings/web/",
    "build-soql-wasm": "cd soql && npx tree-sitter build --wasm && cp tree-sitter-soql.wasm ../docs/playground/js/ && cp tree-sitter-soql.wasm ../bindings/web/",
    "build-sosl-wasm": "cd sosl && npx tree-sitter build --wasm && cp tree-sitter-sosl.wasm ../docs/playground/js/ && cp tree-sitter-sosl.wasm ../bindings/web/",
    "build-sflog-wasm": "cd sflog && npx tree-sitter build --wasm && cp tree-sitter-sflog.wasm ../docs/playground/js/ && cp tree-sitter-sflog.wasm ../bindings/web/",
    "test-load": "node -e \"console.log(require('./apex').name), console.log(require('./soql').name), console.log(require('./sosl').name), console.log(require('./sflog').name)\"",
    "test": "npm run test-apex && npm run test-soql && npm run test-sosl && npm run test-sflog && npm run test-load",
    "test-apex": "cd apex && npx tree-sitter test",
    "test-soql": "cd soql && npx tree-sitter test",
    "test-sosl": "cd sosl && npx tree-sitter test",
    "test-sflog": "cd sflog && npx tree-sitter test",
    "install": "node-gyp-build",
    "prebuildify": "prebuildify --napi",
    "prebuildify-all": "npm run prebuildify-mac && npm run prebuildify-windows",
    "prebuildify-mac": "prebuildify --napi --arch x64+arm64 --platform darwin",
    "prebuildify-windows": "prebuildify --napi --arch x64+arm64 --platform win32"
  },
  "tree-sitter": [
    {
      "scope": "source.apex",
      "path": "apex",
      "file-types": [
        "cls",
        "trigger",
        "apex"
      ],
      "highlights": [
        "soql/queries/highlights.scm",
        "sosl/queries/highlights.scm",
        "apex/queries/highlights.scm"
      ],
      "tags": [
        "apex/queries/tags.scm"
      ]
    },
    {
      "scope": "source.soql",
      "path": "soql",
      "file-types": [
        "soql"
      ],
      "highlights": "soql/queries/highlights.scm"
    },
    {
      "scope": "source.sosl",
      "path": "sosl",
      "file-types": [
        "sosl"
      ],
      "highlights": [
        "soql/queries/highlights.scm",
        "sosl/queries/highlights.scm"
      ]
    },
    {
      "scope": "source.sflog",
      "path": "sflog",
      "file-types": [
        "sflog"
      ],
      "highlights": [
        "sflog/queries/highlights.scm"
      ]
    }
  ],
  "files": [
    "*/queries/*",
    "*/src/grammar.json",
    "*/src/node-types.json",
    "*/src/parser.c",
    "*/src/tree_sitter/parser.h",
    "bindings/node/*.js",
    "bindings/node/*.ts",
    "bindings/node/binding.cc",
    "binding.gyp",
    "prebuilds/**"
  ]
}
